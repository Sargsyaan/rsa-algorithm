{"ast":null,"code":"import { round } from '@taiga-ui/cdk';\nimport { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';\n/**\n * @internal\n */\n\nfunction horizontalDirectionToNumber(direction) {\n  switch (direction) {\n    case 'left':\n      return -1;\n\n    case 'right':\n      return 1;\n  }\n}\n\nfunction tuiFindKeyStepsBoundariesByFn(keySteps, fn) {\n  const keyStepUpperIndex = keySteps.findIndex((keyStep, i) => i && fn(keyStep));\n  const lowerStep = keySteps[keyStepUpperIndex - 1];\n  const upperStep = keySteps[keyStepUpperIndex];\n  return [lowerStep, upperStep];\n}\n\nfunction tuiPercentageToKeyStepValue(valuePercentage, keySteps) {\n  const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([keyStepPercentage, _]) => valuePercentage <= keyStepPercentage);\n  const ratio = (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);\n  const controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;\n  return round(controlValue, TUI_FLOATING_PRECISION);\n}\n\nfunction tuiKeyStepValueToPercentage(value, keySteps) {\n  const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([_, keyStepValue]) => value <= keyStepValue);\n  const ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;\n  return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;\n}\n\nfunction tuiCheckKeyStepsHaveMinMaxPercents(steps) {\n  return !steps.length || steps[0][0] === 0 && steps[steps.length - 1][0] === 100;\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { horizontalDirectionToNumber, tuiCheckKeyStepsHaveMinMaxPercents, tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue }; //# sourceMappingURL=taiga-ui-kit-utils-math.js.map","map":null,"metadata":{},"sourceType":"module"}