{"ast":null,"code":"export const isPrime = n => {\n  for (let i = 2, s = Math.sqrt(n); i <= s; i++) if (n % i === 0) return false;\n\n  return n > 1;\n};\nexport const getRandomPrimePair = () => {\n  let a, b;\n\n  do {\n    a = Math.floor(Math.random() * 5000);\n    b = Math.floor(Math.random() * 5000);\n  } while (!isPrime(a) || !isPrime(b));\n\n  return [a, b];\n};\nexport const gcd = (a, b) => {\n  if (a === 0) return b;\n  return gcd(b % a, a);\n};\nexport const modInverse = (a, b) => {\n  a %= b;\n\n  for (let x = 1; x < b; x++) {\n    if (a * x % b == 1) {\n      return x;\n    }\n  }\n\n  return 0;\n};\nexport const binaryTransform = n => {\n  let i = 0,\n      mod = 0,\n      bigNum = Array.from({\n    length: 1000\n  });\n\n  while (n !== 0) {\n    mod = n % 2;\n    bigNum[i] = mod;\n    n = Math.floor(n / 2);\n    i++;\n  }\n\n  return [i, bigNum];\n};\nexport const modularExp = (a, b, n) => {\n  let c = 0;\n  let d = 1;\n  let [k, bigNum] = binaryTransform(b);\n\n  for (let i = k - 1; i >= 0; i--) {\n    c = 2 * c;\n    d = d * d % n;\n\n    if (bigNum[i] === 1) {\n      c = c + 1;\n      d = d * a % n;\n    }\n  }\n\n  return d;\n};","map":null,"metadata":{},"sourceType":"module"}